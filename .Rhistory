install.packages("learnr")
dbConnect(odbc::odbc(),
.connection_string = "Driver={PostgreSQL ANSI};",
Database = "kypoltics")
library(DBI)
dbConnect(odbc::odbc(),
.connection_string = "Driver={PostgreSQL ANSI};",
Database = "kypoltics")
install.packages("RPostgreSQL")
dbConnect(odbc::odbc(),
.connection_string = "Driver={PostgreSQL ANSI};",
Database = "kypoltics")
dbConnect(dbDriver("PostgreSQL"),
dbname = "kypolitics",
host = "10.0.1.13",
port = 5432,
user = 'rkahne',
password = 'Cookie%crisp1')
dbConnect(RPostgreSQL::dbDriver("PostgreSQL"),
dbname = "kypolitics",
host = "10.0.1.13",
port = 5432,
user = 'rkahne',
password = 'Cookie%crisp1')
dbConnect(RPostgres::Postgres(),
dbname = "kypolitics",
host = "10.0.1.13",
port = 5432,
user = 'rkahne',
password = 'Cookie%crisp1')
install.packages("RPostgres")
dbConnect(RPostgres::Postgres(),
dbname = "kypolitics",
host = "10.0.1.13",
port = 5432,
user = 'rkahne',
password = 'Cookie%crisp1')
dbConnect(RPostgres::Postgres(),
dbname = "kypolitics",
host = "10.116.0.2",
port = 5432,
user = 'rkahne',
password = 'Cookie%crisp1')
dbConnect(RPostgres::Postgres(),
dbname = "kypolitics",
host = "157.245.254.28",
port = 5432,
user = 'rkahne',
password = 'Cookie%crisp1')
dbConnect(RPostgres::Postgres(),
dbname = "kypolitics",
host = "localhost",
port = 5432,
user = 'rkahne',
password = 'Cookie%crisp1')
dbConnect(RPostgres::Postgres(),
dbname = "kypolitics",
host = "localhost",
port = 5432,
user = 'kypolitics',
password = 'Cookie%crisp1')
con <- dbConnect(RPostgres::Postgres(),
dbname = "kypolitics",
host = "localhost",
port = 5432,
user = 'kypolitics',
password = 'Cookie%crisp1')
dbListTables(con)
library(tidyverse)
library(DBI)
con <- dbConnect(RPostgres::Postgres(),
dbname = "kypolitics",
host = "localhost",
port = 5432,
user = 'kypolitics',
password = 'Cookie%crisp1')
election_data <- read_csv('/srv/data/consolidated-election-data.csv')
election_summary_data <- read_csv('/srv/data/consolidated-election-summary-data.csv')
legislative_actions <- read_csv('/srv/data/actions.csv')
legislative_legislators <- read_csv('/srv/data/legislators.csv')
legislative_votes <- read_csv('/srv/data/consolidated_votes.csv')
legislative_metadata <- read_csv('/srv/data/metadata.csv')
legislative_sponsors <- read_csv('/srv/data/sponsors.csv')
election_data
dbWriteTable(con, 'election_data', election_data, overwrite = TRUE, temporary = FALSE, indexes = list('Precinct', 'county', 'race', 'candidate', 'year', 'election', 'party'), row.names = FALSE)
election_summary_data
election_summary_data %>% glimpse()
dbWriteTable(con, 'election_summary_data', election_summary_data, overwrite = TRUE, temporary = FALSE, indexes = list('contest_name', 'choice_name', 'year'), row.names = FALSE)
legislative_actions
dbWriteTable(con, 'legislative_actions', legislative_actions, overwrite = TRUE, temporary = FALSE, indexes = list('bill_num', 'session', 'date'), row.names = FALSE)
legislative_votes
legislative_legislators
dbWriteTable(con, 'legislative_legislators', legislative_legislators, overwrite = TRUE, temporary = FALSE, indexes = list('party','chamber', 'ga_17', 'ga_18', 'ga_19', 'ga_20', 'ga_21'), row.names = FALSE)
dbWriteTable(con, 'legislative_votes', legislative_votes, overwrite = TRUE, temporary = FALSE, indexes = list('legislator_id', 'bill_num', 'session', 'chamber'), row.names = FALSE)
legislative_metadata
dbWriteTable(con, 'legislative_metadata', legislative_metadata, overwrite = TRUE, temporary = FALSE, indexes = list('bill_num', 'session', 'passed', 'passed_house', 'passed_senate'), row.names = FALSE)
legislative_sponsors
dbWriteTable(con, 'legislative_sponsors', legislative_sponsors, overwrite = TRUE, temporary = FALSE, indexes = list('bill_num', 'session'), row.names = FALSE)
library(shinydashboard)
?keyring::key_set_with_value()
keyring::key_set_with_value('db_credential'. 'kypolitics', 'Cookie%crisp1')
keyring::key_set_with_value('db_credential', 'kypolitics', 'Cookie%crisp1')
library(keyring)
library(tidyverse)
library(DBI)
db <- con <- dbConnect(RPostgres::Postgres(),
dbname = "kypolitics",
host = "localhost",
port = 5432,
user = 'kypolitics',
password = key_get('db_credential', 'kypolitics'))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "shinydashboard" )
#' @import shiny
#' @import shinydashboard
#' @import shinyWidgets
#' @import ggplot2
#' @import dplyr
#' @import tidyr
#' @import readr
#' @import purrr
#' @import tibble
#' @import stringr
#' @import forcats
#' @import reactable
#' @import plotly
#' @import scales
#' @import DBI
#' @import keyring
#' @noRd
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "shinyWidgets" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "ggplot2" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "dplyr" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "tidyr" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "readr" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "purrr" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "tibble" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "stringr" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "forcats" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "reactable" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "plotly" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "scales" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "DBI" )
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "keyring" )
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## RStudio ----
## If you want to deploy on RStudio related platforms
# golem::add_rstudioconnect_file()
# golem::add_shinyappsio_file()
golem::add_shinyserver_file()
db <- dbConnect(odbc::odbc(),
.connection_string = "Driver={PostgreSQL ANSI};",
Database = "kypolitics")
library(tidyverse)
library(DBI)
db <- dbConnect(odbc::odbc(),
.connection_string = "Driver={PostgreSQL ANSI};",
Database = "kypolitics")
dbListTables(db)
tbl(db, 'election_data')
golem::add_module('elections')
tbl(db, 'election_data') %>% select(year) %>% distinct() %>% collect()
?shiny::selectInput
library(leaflet)
library(tidyverse)
load('/srv/data/ky-political-maps.rda')
library(sf)
library(plotly)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install.packages('pool')
?dbPool
?pool::dbPool
db <- dbPool(odbc::odbc(),
.connection_string = "Driver={PostgreSQL ANSI};",
Database = "kypolitics")
library(pool)
library(tidyverse)
db <- dbPool(odbc::odbc(),
.connection_string = "Driver={PostgreSQL ANSI};",
Database = "kypolitics")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
db <- pool::dbPool(odbc::odbc(),
.connection_string = "Driver={PostgreSQL ANSI};",
Database = "kypolitics")
dbListTables(db)
DBI::dbListTables(db)
library(pool)
library(tidyverse)
dbListTables(db)
tibble(app = 'kypoliticaldata.com',
time = Sys.time())
visits <- tibble(app = 'kypoliticaldata.com',
time = Sys.time())
sessionInfo()
dbWriteTable(db, 'site_visit_history', visits, temporary = FALSE, overwrite = TRUE, indexes = list('app'))
dbListTables(db)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
DBI::tbl(db, 'site_visit_history')
dbplyr::tbl(db, 'site_visit_history')
pool::tbl(db, 'site_visit_history')
library(tidyverse)
tbl(db, 'site_visit_history')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(tidyverse)
tbl(db, 'site_visit_history')
db <- pool::dbPool(odbc::odbc(),
.connection_string = "Driver={PostgreSQL ANSI};",
Database = "kypolitics")
tbl(db, 'site_visit_history')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(tidyverse)
tbl(db, 'site_visit_history')
visit <- tibble::tibble(app = 'kypoliticaldata.com',
time = Sys.time())
pool::dbWriteTable(db, 'site_visit_history', visit, temporary = FALSE, append = TRUE, indexes = list('app'))
tbl(db, 'site_visit_history')
Sys.time()
?Sys.time()
Sys.timezone(0)
Sys.timezone()
tbl(db, 'site_visit_history')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
tbl(db, 'site_visit_history')
library(tidyverse)
library(pool)
tbl(db, 'site_visit_history')
tbl(db, 'site_visit_history') %>% collect()
